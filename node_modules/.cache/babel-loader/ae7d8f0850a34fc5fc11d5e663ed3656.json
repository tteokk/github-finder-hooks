{"ast":null,"code":"var _jsxFileName = \"/Users/elizabethshim/Documents/github/udemy front to back/github-finder-hooks/src/context/github/GithubState.js\";\n// actions\n// i.e. when we search users and it makes a request to github\n// cleaning up app.js\n// using types\nimport React, { useReducer } from 'react';\nimport axios from '';\nimport githubContext from './githubContext';\nimport githubReducer from './githubReducer';\nimport { SEARCH_USERS, SET_LOADING, CLEAR_USERS, GET_USER, GET_REPOS } from '../types'; // using axios for requests\n// useReducer is a hook\n// creating initial state\n\nconst GithubState = props => {\n  const initialState = {\n    users: [],\n    user: {},\n    repos: [],\n    loading: false\n  }; // use reducer hook\n\n  const [state, dispatch] = useReducer(GithubReducer, initialState); // search users\n\n  const searchUsers = async text => {\n    setLoading(true);\n    const res = await axios.get(`https://api.github.com/search/users?q=${text}&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secrets=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`); // res is request\n\n    dispatch({\n      type: SEARCH_USERS,\n      payload: res.data\n    });\n  }; // get user\n  // get repos\n  // clear users\n  // set loading\n\n\n  const setLoading = () => dispatch({\n    type: SET_LOADING\n  }); // return provider\n  // making these available to entire app\n  // wrap entire application in this provider\n\n\n  return /*#__PURE__*/React.createElement(GithubContext.Provider, {\n    value: {\n      users: state.users,\n      user: state.user,\n      repos: state.repos,\n      loading: state.loading\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }\n  }, props.children);\n};\n\nexport default GithubState;","map":{"version":3,"sources":["/Users/elizabethshim/Documents/github/udemy front to back/github-finder-hooks/src/context/github/GithubState.js"],"names":["React","useReducer","axios","githubContext","githubReducer","SEARCH_USERS","SET_LOADING","CLEAR_USERS","GET_USER","GET_REPOS","GithubState","props","initialState","users","user","repos","loading","state","dispatch","GithubReducer","searchUsers","text","setLoading","res","get","process","env","REACT_APP_GITHUB_CLIENT_ID","REACT_APP_GITHUB_CLIENT_SECRET","type","payload","data","children"],"mappings":";AAAA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,EAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SACIC,YADJ,EAEIC,WAFJ,EAGIC,WAHJ,EAIIC,QAJJ,EAKIC,SALJ,QAMO,UANP,C,CAQA;AACA;AAEA;;AACA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AACzB,QAAMC,YAAY,GAAG;AACjBC,IAAAA,KAAK,EAAE,EADU;AAEjBC,IAAAA,IAAI,EAAE,EAFW;AAGjBC,IAAAA,KAAK,EAAE,EAHU;AAIjBC,IAAAA,OAAO,EAAE;AAJQ,GAArB,CADyB,CAQzB;;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjB,UAAU,CAAEkB,aAAF,EAAiBP,YAAjB,CAApC,CATyB,CAWzB;;AACA,QAAMQ,WAAW,GAAG,MAAMC,IAAN,IAAc;AAC9BC,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEJ,UAAMC,GAAG,GAAG,MAAMrB,KAAK,CAACsB,GAAN,CAAW,yCAAwCH,IAAK,cAAaI,OAAO,CAACC,GAAR,CAAYC,0BAA2B,mBAAkBF,OAAO,CAACC,GAAR,CAAYE,8BAA+B,EAAzK,CAAlB,CAHkC,CAI9B;;AACRV,IAAAA,QAAQ,CAAE;AACNW,MAAAA,IAAI,EAAExB,YADA;AAENyB,MAAAA,OAAO,EAAEP,GAAG,CAACQ;AAFP,KAAF,CAAR;AAIC,GATG,CAZyB,CAuBzB;AAEA;AAEA;AAEA;;;AACA,QAAMT,UAAU,GAAG,MAAMJ,QAAQ,CAAC;AAAEW,IAAAA,IAAI,EAAEvB;AAAR,GAAD,CAAjC,CA9ByB,CAgCzB;AACA;AACA;;;AACA,sBAAO,oBAAC,aAAD,CAAe,QAAf;AACP,IAAA,KAAK,EAAG;AACJO,MAAAA,KAAK,EAAEI,KAAK,CAACJ,KADT;AAEJC,MAAAA,IAAI,EAAEG,KAAK,CAACH,IAFR;AAGJC,MAAAA,KAAK,EAAEE,KAAK,CAACF,KAHT;AAIJC,MAAAA,OAAO,EAAEC,KAAK,CAACD;AAJX,KADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOFL,KAAK,CAACqB,QAPJ,CAAP;AASH,CA5CD;;AA8CA,eAAetB,WAAf","sourcesContent":["// actions\n// i.e. when we search users and it makes a request to github\n// cleaning up app.js\n// using types\n\nimport React, { useReducer } from 'react';\nimport axios from '';\nimport githubContext from './githubContext';\nimport githubReducer from './githubReducer';\nimport {\n    SEARCH_USERS,\n    SET_LOADING,\n    CLEAR_USERS,\n    GET_USER,\n    GET_REPOS\n} from '../types';\n\n// using axios for requests\n// useReducer is a hook\n\n// creating initial state\nconst GithubState = props => {\n    const initialState = {\n        users: [],\n        user: {},\n        repos: [],\n        loading: false\n    }\n\n    // use reducer hook\n    const [state, dispatch] = useReducer (GithubReducer, initialState);\n\n    // search users\n    const searchUsers = async text => {\n        setLoading(true);\n\n    const res = await axios.get(`https://api.github.com/search/users?q=${text}&client_id=${process.env.REACT_APP_GITHUB_CLIENT_ID}&client_secrets=${process.env.REACT_APP_GITHUB_CLIENT_SECRET}`);\n        // res is request\ndispatch( { \n    type: SEARCH_USERS,\n    payload: res.data\n})    \n};\n\n    // get user\n\n    // get repos\n\n    // clear users\n\n    // set loading\n    const setLoading = () => dispatch({ type: SET_LOADING });\n\n    // return provider\n    // making these available to entire app\n    // wrap entire application in this provider\n    return <GithubContext.Provider\n    value ={{\n        users: state.users,\n        user: state.user,\n        repos: state.repos,\n        loading: state.loading\n    }}>\n        {props.children}\n    </GithubContext.Provider>\n}\n\nexport default GithubState;"]},"metadata":{},"sourceType":"module"}